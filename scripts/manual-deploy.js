// scripts/manual-deploy.js
// Manual deployment instructions

console.log('ðŸš€ FLOWSUBS CONTRACT DEPLOYMENT');
console.log('================================');
console.log('');
console.log('ðŸ“‹ MANUAL DEPLOYMENT STEPS:');
console.log('');
console.log('1. Open your browser and go to: https://testnet.flowport.io/');
console.log('');
console.log('2. Click "Connect Wallet"');
console.log('3. Select "Private Key" option');
console.log('4. Paste this private key:');
console.log('   b9098df8816abc841a95eda6214e6cc95e6f4cf38bee0494e2e89fd36226efaf');
console.log('');
console.log('5. Once connected, go to "Execute Transaction"');
console.log('');
console.log('6. First, get your account address by executing this transaction:');
console.log('');
console.log('```cadence');
console.log('transaction {');
console.log('  prepare(signer: AuthAccount) {');
console.log('    log("Account address: ".concat(signer.address.toString()))');
console.log('  }');
console.log('}');
console.log('```');
console.log('');
console.log('7. Note the account address from the logs');
console.log('');
console.log('8. Now deploy the contract by executing this transaction:');
console.log('');
console.log('```cadence');
console.log('transaction {');
console.log('    prepare(signer: AuthAccount) {');
console.log('        let contractCode = `');
console.log('// FlowSubs Contract');
console.log('import FungibleToken from 0x9a0766d93b6608b7');
console.log('import FlowToken from 0x7e60df042a9c0868');
console.log('');
console.log('pub event SubscriptionCreated(');
console.log('    subscriber: Address,');
console.log('    provider: Address,');
console.log('    amount: UFix64,');
console.log('    interval: UFix64,');
console.log('    subscriptionId: UInt64');
console.log(')');
console.log('');
console.log('pub struct Subscription {');
console.log('    pub let id: UInt64');
console.log('    pub let subscriber: Address');
console.log('    pub let provider: Address');
console.log('    pub let amount: UFix64');
console.log('    pub let interval: UFix64');
console.log('    pub let nextPaymentTime: UFix64');
console.log('    pub let isActive: Bool');
console.log('    pub let createdAt: UFix64');
console.log('');
console.log('    init(id: UInt64, subscriber: Address, provider: Address, amount: UFix64, interval: UFix64, nextPaymentTime: UFix64, isActive: Bool, createdAt: UFix64) {');
console.log('        self.id = id');
console.log('        self.subscriber = subscriber');
console.log('        self.provider = provider');
console.log('        self.amount = amount');
console.log('        self.interval = interval');
console.log('        self.nextPaymentTime = nextPaymentTime');
console.log('        self.isActive = isActive');
console.log('        self.createdAt = createdAt');
console.log('    }');
console.log('}');
console.log('');
console.log('pub struct ProviderInfo {');
console.log('    pub let address: Address');
console.log('    pub let name: String');
console.log('    pub let description: String');
console.log('    pub let isActive: Bool');
console.log('');
console.log('    init(address: Address, name: String, description: String, isActive: Bool) {');
console.log('        self.address = address');
console.log('        self.name = name');
console.log('        self.description = description');
console.log('        self.isActive = isActive');
console.log('    }');
console.log('}');
console.log('');
console.log('pub contract FlowSubs {');
console.log('    pub var subscriptionCounter: UInt64');
console.log('    pub var subscriptions: {UInt64: Subscription}');
console.log('    pub var providers: {Address: ProviderInfo}');
console.log('');
console.log('    init() {');
console.log('        self.subscriptionCounter = 0');
console.log('        self.subscriptions = {}');
console.log('        self.providers = {}');
console.log('    }');
console.log('');
console.log('    pub fun createSubscription(subscriber: Address, provider: Address, amount: UFix64, interval: UFix64): UInt64 {');
console.log('        let subscriptionId = self.subscriptionCounter + 1');
console.log('        self.subscriptionCounter = subscriptionId');
console.log('');
console.log('        let subscription = Subscription(');
console.log('            id: subscriptionId,');
console.log('            subscriber: subscriber,');
console.log('            provider: provider,');
console.log('            amount: amount,');
console.log('            interval: interval,');
console.log('            nextPaymentTime: getCurrentBlock().timestamp + interval,');
console.log('            isActive: true,');
console.log('            createdAt: getCurrentBlock().timestamp');
console.log('        )');
console.log('');
console.log('        self.subscriptions[subscriptionId] = subscription');
console.log('');
console.log('        emit SubscriptionCreated(');
console.log('            subscriber: subscriber,');
console.log('            provider: provider,');
console.log('            amount: amount,');
console.log('            interval: interval,');
console.log('            subscriptionId: subscriptionId');
console.log('        )');
console.log('');
console.log('        return subscriptionId');
console.log('    }');
console.log('');
console.log('    pub fun cancelSubscription(subscriptionId: UInt64) {');
console.log('        if let subscription = self.subscriptions[subscriptionId] {');
console.log('            let cancelledSubscription = Subscription(');
console.log('                id: subscription.id,');
console.log('                subscriber: subscription.subscriber,');
console.log('                provider: subscription.provider,');
console.log('                amount: subscription.amount,');
console.log('                interval: subscription.interval,');
console.log('                nextPaymentTime: subscription.nextPaymentTime,');
console.log('                isActive: false,');
console.log('                createdAt: subscription.createdAt');
console.log('            )');
console.log('');
console.log('            self.subscriptions[subscriptionId] = cancelledSubscription');
console.log('');
console.log('            emit SubscriptionCancelled(');
console.log('                subscriber: subscription.subscriber,');
console.log('                provider: subscription.provider,');
console.log('                subscriptionId: subscriptionId');
console.log('            )');
console.log('        }');
console.log('    }');
console.log('');
console.log('    pub fun registerProvider(name: String, description: String) {');
console.log('        let providerInfo = ProviderInfo(');
console.log('            address: self.account.address,');
console.log('            name: name,');
console.log('            description: description,');
console.log('            isActive: true');
console.log('        )');
console.log('');
console.log('        self.providers[self.account.address] = providerInfo');
console.log('    }');
console.log('');
console.log('    pub fun getSubscription(subscriptionId: UInt64): Subscription? {');
console.log('        return self.subscriptions[subscriptionId]');
console.log('    }');
console.log('');
console.log('    pub fun getSubscriberSubscriptions(subscriber: Address): [Subscription] {');
console.log('        var subscriberSubscriptions: [Subscription] = []');
console.log('        for subscription in self.subscriptions.values {');
console.log('            if subscription.subscriber == subscriber {');
console.log('                subscriberSubscriptions.append(subscription)');
console.log('            }');
console.log('        }');
console.log('        return subscriberSubscriptions');
console.log('    }');
console.log('');
console.log('    pub fun getAllProviders(): [ProviderInfo] {');
console.log('        var allProviders: [ProviderInfo] = []');
console.log('        for provider in self.providers.values {');
console.log('            allProviders.append(provider)');
console.log('        }');
console.log('        return allProviders');
console.log('    }');
console.log('}');
console.log('`');
console.log('');
console.log('        let contract = Contract(name: "FlowSubs", code: contractCode)');
console.log('        signer.contracts.add(name: "FlowSubs", code: contract.code)');
console.log('');
console.log('        log("FlowSubs contract deployed successfully!")');
console.log('        log("Contract address: ".concat(signer.address.toString()))');
console.log('    }');
console.log('}');
console.log('```');
console.log('');
console.log('9. After deployment, copy the contract address from the logs');
console.log('');
console.log('10. Tell me the contract address and I will update your configuration!');
console.log('');
console.log('ðŸ”— Alternative URLs:');
console.log('- https://testnet.flowport.io/');
console.log('- https://flow-view-source.com/');
console.log('- https://testnet.flowscan.org/');
